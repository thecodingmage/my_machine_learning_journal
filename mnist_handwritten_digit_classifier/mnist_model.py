# -*- coding: utf-8 -*-
"""mnist_handwritten_digit_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OjjIdrnMGeGOHP97wO2-wWtBzGwv7orN
"""

import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

y_train

# Preprocess the data: Normalize pixel values to [0, 1]
x_train = x_train/255
x_test = x_test/255

# Build the model
model = models.Sequential([
    layers.Flatten(input_shape=(28, 28)),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=5)

# Evaluate the model on test data
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"\nTest accuracy: {test_acc:.4f}")

# Make predictions
predictions = model.predict(x_test)

# Visualize one prediction
def plot_prediction(i):
    plt.imshow(x_test[i], cmap='gray')
    plt.title(f"Prediction: {np.argmax(predictions[i])}, True: {y_test[i]}")
    plt.axis('off')
    plt.show()

plot_prediction(19)

